<?xml version="1.0" encoding="UTF-8"?>
<project name="" basedir="." default="...">




    <!-- ==================================== -->
    <!--              Properties              -->
    <!-- ==================================== -->



    
    <!-- Override memory limit -->
    <php expression="ini_set('memory_limit', '-1');" level="verbose" />
    
    <!-- Set timestamp -->
    <tstamp/>
    
    <!-- used for permanent backups -->
    <php expression="date('d-F-Y')" returnProperty="time.today" level="verbose" />
    
    <property name="db.data_path" value="${build.path}/data/db" />
    <property name="db.host" value="localhost" />
    <property name="db.root.user" value="root" />
    <property name="db.root.pass" value="" />

    <!-- Load the PDOSQLEXEC task -->
    <taskdef name="pdosqlexec" classname="phing.tasks.ext.pdo.PDOSQLExecTask" />



    
    <!-- ==================================== -->
    <!--                Tasks                 -->
    <!-- ==================================== -->

    


    <!--
        Required configuration for the database tasks.
    -->
    <target name="db:need_configuration" hidden="true">
        <if>
            <and>
                <isset property="db.host" />
                <isset property="db.user" />
                <isset property="db.pass" />
                <isset property="db.name" />
                <isset property="db.root.user" />
                <isset property="db.root.pass" />
                <isset property="db.data_path" />
                <isset property="s3.key" />
                <isset property="s3.secret" />
            </and>
            <then>
                <property name="db.is_configured" value="true" />
            </then>
            <else>
                <property name="db.is_configured" value="false" />
                <phingcall target="db:build:config" />
            </else>
        </if>
    </target>


    <!--
        Configure the database.
        Call this in the platform config if it requires a database
    -->
    <target name="db:build:config" description="Configure database" hidden="true" depends="build:need_configuration">
        <echo msg="Configuring database ================================" />

        <input propertyname="db.host" defaultValue="${db.host}" promptChar=" ?">MySQL Host</input>
        <input propertyname="db.user" defaultValue="${build.basename}" promptChar=" ?">MySQL User</input>
        <input propertyname="db.pass" defaultValue="${db.user}" promptChar=" ?">MySQL Password</input>
        <input propertyname="db.name" defaultValue="${db.user}" promptChar=" ?">MySQL DB Name</input>
        <input propertyname="db.root.user" defaultValue="${db.root.user}" promptChar=" ?">MySQL root User</input>
        <input propertyname="db.root.pass" defaultValue="${db.root.pass}" promptChar=" ?">MySQL root Password</input>

        <phingcall target="build:save_config" />
    </target>


    <!-- 
        The create, drop, recreate and empty targets
    -->
    <target name="db:create" depends="db:need_configuration, db:drop" description="Create the database including privileges">
        <taskdef name="pdosqlexec" classname="phing.tasks.ext.pdo.PDOSQLExecTask"/>
        <pdosqlexec url="mysql:host=${db.host};" userid="${db.root.user}" password="${db.root.pass}">
            CREATE DATABASE IF NOT EXISTS ${db.name} CHARACTER SET utf8;
            GRANT all ON ${db.name}.* TO '${db.name}'@'${db.host}' IDENTIFIED BY '${db.name}';
            GRANT all ON ${db.name}.* TO '${db.name}'@'%' IDENTIFIED BY '${db.name}';
            FLUSH PRIVILEGES;
        </pdosqlexec>
        <echo msg="Database created!" />
    </target>


    <!-- Drops the MySQL database -->
    <target name="db:drop" depends="db:need_configuration" description="Drop the database">
        <pdosqlexec url="mysql:host=${db.host};" userid="${db.root.user}" password="${db.root.pass}">
            DROP DATABASE if exists ${db.name};
        </pdosqlexec>
        <echo msg="Database dropped!" />
    </target>


    <!-- Alias: db:drop, db:create -->
    <target name="db:recreate" description="Drops and recreates the database" depends="db:drop, db:create">
    </target>
        

    <!-- Empty the database -->
    <target name="db:data:empty" description="Truncate all tables">
        <pdosqlexec url="mysql:host=${db.host};dbname=${db.name}" userid="${db.user}" password="${db.pass}">
            SELECT CONCAT('TRUNCATE TABLE ',table_name, ';') FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = DATABASE();
        <formatter type="plain" outfile="${db.data_path}/truncate.sql" showheaders="false" coldelim="" />
        </pdosqlexec>

        <pdosqlexec url="mysql:host=${db.host};dbname=${db.name}" userid="${db.user}" password="${db.pass}" src="${db.data_path}/truncate.sql" />
        <delete file="${db.data_path}/truncate.sql" />
    </target>
    

    <!--
        The loading, dumping, updating methods for structure and data
    -->
    <!-- Create the database structure -->
    <target name="db:structure:load" depends="db:drop, db:create" description="Recreate the DB and load structure from data/db/create.sql">
        <pdosqlexec url="mysql:host=${db.host};dbname=${db.name}" userid="${db.user}" password="${db.pass}" src="${db.data_path}/create.sql" />
    </target>


    <!-- Populate the database -->
    <target name="db:data:load" depends="db:data:empty" description="Empty the database and reload from data/db/data.sql">
        <exec command="bash bin/mysql &lt; ${db.data_path}/data.sql" escape="false" />
    </target>


    <!-- Dump the data -->
    <target name="db:data:dump" depends="db:need_configuration" description="Dump DB structure into data/db/data.sql">
        <echo msg="MySQL dump tables '${db.tables.data}' into ${db.data_path}/data.sql" />
        <exec command="mysqldump -cQ --complete-insert --extended-insert=0 --no-create-info --skip-comments --add-drop-table=false --no-create-db=true -u${db.user} -p${db.user} -h${db.host} ${db.name} ${db.tables.data}  > ${db.data_path}/data.sql" />
    </target>


    <!-- Dump the structure -->
    <target name="db:structure:dump" depends="db:need_configuration" description="Dump DB structure into data/db/create.sql">
        <echo msg="MySQL dump tables '${db.tables.structure}' into ${db.data_path}/data.sql" />
        <exec command="mysqldump -cQ --add-drop-table=false --no-data --skip-comments -u${db.user} -p${db.user} -h${db.host} ${db.name} ${db.tables.structure} > ${db.data_path}/create.sql" />
    </target>


    <!-- Update DB structure from S3 -->
    <target name="db:structure:update" depends="db:need_configuration" description="Download structure file from S3 to data/db/create.sql">
        <echo msg="Grabbing data from: database.${project.name}.3ev.me" />
        <s3get
            bucket="database.${project.name}.3ev.me"
            object="create.sql"
            target="${db.data_path}/create.sql" />
    </target>


    <!-- Update DB data from S3 -->
    <target name="db:data:update" depends="db:need_configuration" description="Download data file from S3 to data/db/data.sql">
        <s3get
            bucket="database.${project.name}.3ev.me"
            object="data.sql"
            target="${db.data_path}/data.sql" />
    </target>
    

    <!-- Uploads the structure + data file to S3, keeps forever -->
    <target name="db:commit:forever" depends="db:need_configuration" description="Upload structure + data to S3, forever">
        <s3put
            createBuckets="true"
            bucket="database.${project.name}.3ev.me"
            object="create-${time.today}.sql"
            source="${db.data_path}/create.sql" />

        <s3put
            createBuckets="true"
            bucket="database.${project.name}.3ev.me"
            object="data-${time.today}.sql"
            source="${db.data_path}/data.sql" />
    </target>


    <!-- Uploads the structure file to S3 -->
    <target name="db:structure:commit" depends="db:need_configuration" description="Upload structure to S3 from data/db/create.sql">
        <s3put
            createBuckets="true"
            bucket="database.${project.name}.3ev.me"
            object="create.sql"
            source="${db.data_path}/create.sql" />
    </target>


    <!-- Uploads the data file to S3 -->
    <target name="db:data:commit" depends="db:need_configuration" description="Upload data to S3 from data/db/data.sql">
        <s3put
            createBuckets="true"
            bucket="database.${project.name}.3ev.me"
            object="data.sql"
            source="${db.data_path}/data.sql" />
    </target>
    

    <!-- 
        The zip targets
    -->


    <!-- Update DB structure from S3 -->
    <target name="db:tar:upload" depends="db:need_configuration, db:structure:dump, db:data:dump" description="Create and upload a tar of the project's data to S3">
        <exec command="tar czf ${db.data_path}/${project.name}.tar.gz data/db/create.sql data/db/data.sql" />
        
        <s3put
            createBuckets="true"
            bucket="database.${project.name}.3ev.me"
            object="${project.name}.tar.gz"
            source="${db.data_path}/${project.name}.tar.gz" />
    </target>
    

    <!-- Update DB structure from S3 -->
    <target name="db:tar:download" depends="db:need_configuration" description="Download a tar of the project's data from S3 and untar into data/db/">
        <s3get
            bucket="database.${project.name}.3ev.me"
            object="${project.name}.tar.gz"
            target="${db.data_path}/${project.name}.tar.gz" />
        
        <exec command="tar xzf ${db.data_path}/${project.name}.tar.gz" />
    </target>
    

    <!--
        Meta tasks
    -->
    

    <!--
        Updates structure + data files
        Call db:reload
     -->
    <target name="db:update" depends="db:structure:update, db:data:update, db:reload" description="Download structure, data from S3 and load">
    </target>
    

    <!--
        Drops + Creates the database
        Loads structure + data
    -->
    <target name="db:reload" depends="db:structure:load, db:data:load" description="Recreate DB + load data">
        <!-- see the 'depends' attribute -->
    </target>




</project>
